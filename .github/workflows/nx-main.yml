name: Nx Main

on:
  workflow_call:
    secrets: {}
    inputs:
      settings-file:
        description: 'Path to the settings file'
        required: false
        type: string
        default: '.github/ci-settings.yml'
      environment-variables:
        required: false
        type: string
      install-commands:
        required: false
        type: string
      final-commands:
        required: false
        type: string
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
      timeout:
        required: false
        type: number
        default: 60

env:
  # If a pull request, NX_BRANCH will be the PR number, otherwise the current ref name
  NX_BRANCH: ${{ github.event.number || github.ref_name }}
  NX_CLOUD_DISTRIBUTED_EXECUTION: false

jobs:
  main:
    runs-on: ${{ inputs.runs-on }}
    name: Run
    timeout-minutes: ${{ inputs.timeout }}
    defaults:
      run:
        # Use either the user-provided working directory or the default checkout path
        working-directory: ${{ github.workspace }}
        shell: bash

    steps:
      # ---------------------------------------------------
      # 1) CHECKOUT CODE
      #    - For Pull Requests, checkout the head SHA
      #    - For direct pushes, just checkout main
      # ---------------------------------------------------
      - uses: actions/checkout@v4
        name: Checkout [Pull Request]
        if: ${{ github.event_name == 'pull_request' }}
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - uses: actions/checkout@v4
        name: Checkout [Default Branch]
        if: ${{ github.event_name != 'pull_request' }}
        with:
          fetch-depth: 0

      # ---------------------------------------------------
      # 2) PARSE SETTINGS FROM YAML FILE
      #    e.g., .github/ci-settings.yml
      # ---------------------------------------------------
      - name: Parse additional settings
        id: settings-parser
        uses: christian-ci/action-yaml-github-output@v2
        with:
          file_path: './${{ inputs.settings-file }}'

      # ---------------------------------------------------
      # 3) SET SHAs FOR Nx "affected" COMMANDS
      #    - exports $NX_BASE_SHA / $NX_HEAD_SHA
      # ---------------------------------------------------
      - name: Derive SHAs for Nx
        uses: nrwl/nx-set-shas@v4
        with:
          main-branch-name: ${{ steps.settings-parser.outputs.main-branch-name }}

      # ---------------------------------------------------
      # 4) DETECT (OR HARD-CODE) PACKAGE MANAGER
      #    (Here we hard-code to npm)
      # ---------------------------------------------------
      - name: Detect package manager
        id: package_manager
        run: echo "name=npm" >> "$GITHUB_OUTPUT"

      # ---------------------------------------------------
      # 5) SETUP NODE (Via Volta)
      #    - Node version from your ci-settings.yml
      # ---------------------------------------------------
      - uses: volta-cli/action@v4
        name: Setup Node
        with:
          node-version: "${{ steps.settings-parser.outputs.node-version }}"
          package-json-path: "${{ github.workspace }}/package.json"

      # ---------------------------------------------------
      # 6) SETUP PYTHON
      #    - Python version from your ci-settings.yml
      # ---------------------------------------------------
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ steps.settings-parser.outputs.python-version }}

      # ---------------------------------------------------
      # 7) PRINT Node/Go/Python/Terraform Versions
      #    (Useful debugging info)
      # ---------------------------------------------------
      - name: Print runtime versions
        id: versions
        run: |
          echo "Node: $(node --version)"
          echo "NPM: $(npm --version)"
          echo "Python: $(python --version)"

          # Output just the Node.js version number without the 'v' for caching keys
          node_ver=$(node --version)
          node_ver_clean=${node_ver#v}  # remove leading 'v'
          echo "node_version=$node_ver_clean" >> $GITHUB_OUTPUT

      # ---------------------------------------------------
      # 8) PROCESS environment-variables
      #    - Writes them into the GITHUB_ENV file
      # ---------------------------------------------------
      - name: Process environment variables
        if: ${{ inputs.environment-variables != '' }}
        uses: actions/github-script@v7
        env:
          ENV_VARS: ${{ inputs.environment-variables }}
        with:
          script: |
            const { appendFileSync } = require('fs');

            // trim spaces and escape quotes
            const cleanStr = str => str.trim().replaceAll(/`/g, "`");

            // parse variable to correct type if possible
            const parseStr = str =>
              str === 'true' || str === 'TRUE'
                ? true
                : str === 'false' || str === 'FALSE'
                  ? false
                  : isNaN(str)
                    ? str
                    : parseFloat(str);

            const varsStr = process.env.ENV_VARS || '';
            const vars = varsStr
              .split('\n')
              .map(variable => variable.trim())
              .filter(variable => variable.includes('='))
              .map(variable => ({
                name: cleanStr(variable.split('=')[0]),
                value: cleanStr(variable.slice(variable.indexOf('=') + 1))
              }));

            for (const v of vars) {
              console.log(`Appending environment variable "${v.name}" with value "${v.value}" to ${process.env.GITHUB_ENV}`);
              appendFileSync(process.env.GITHUB_ENV, `${v.name}=${parseStr(v.value)}\n`);
            }

      # ---------------------------------------------------
      # 9) RUN ANY USER-DEFINED INSTALL COMMANDS (OPTIONAL)
      # ---------------------------------------------------
      - name: Run custom install commands
        if: ${{ inputs.install-commands != '' }}
        run: ${{ inputs.install-commands }}


      # ---------------------------------------------------
      # 10) CACHE NODE_MODULES & INSTALL
      #    - Keyed on OS + package-lock.json
      # ---------------------------------------------------
      - name: Cache node_modules if using npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

      - name: Install dependencies
        if: ${{ inputs.install-commands == '' }}
        run: npm ci --legacy-peer-deps

      # ---------------------------------------------------
      # 11) INSTALL POETRY & CACHE
      #     - Poetry version from your ci-settings.yml
      # ---------------------------------------------------

      - name: Install Poetry
        uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: ${{ steps.settings-parser.outputs.poetry-version }}

      - name: Cache Poetry Virtual Environment
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-

      - name: Install Python Dependencies (Poetry)
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-root --with doc --no-interaction --no-ansi

      # ---------------------------------------------------
      # 12) CACHE Nx's .nx/cache
      #    - Greatly speeds up repeated builds/tests
      # ---------------------------------------------------
      - name: Cache Nx
        uses: actions/cache@v4
        with:
          path: .nx/cache
          key: ${{ runner.os }}-nxcache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nxcache-

      - name: Run any configured final-commands sequentially
        if: ${{ inputs.final-commands != '' }}
        run: |
          source $(poetry env info --path)/bin/activate
          ${{ inputs.final-commands }}