{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NX AI Plugin Documentation","text":"<p>Welcome to the NX AI Plugin\u2014a next-generation solution for automating code quality, enforcing architectural standards, and enhancing developer productivity within your Nx monorepo. This plugin enables seamless integration of AI-powered agents into your development workflow, improving efficiency and ensuring adherence to best practices.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#1-create-and-manage-ai-agents","title":"1. Create and Manage AI Agents","text":"<p>Easily define, configure, and deploy specialized AI agents that enforce coding rules, suggest improvements, and help maintain consistency across your codebase.</p>"},{"location":"#2-context-aware-vector-store","title":"2. Context-Aware Vector Store","text":"<p>Integrate a vector store to enable dynamic, memory-efficient interactions. Agents access deep contextual insights, allowing them to provide more accurate recommendations based on project history and structure.</p>"},{"location":"#3-ai-powered-code-reviews","title":"3. AI-Powered Code Reviews","text":"<p>Automate and streamline the code review process with AI-generated feedback, improving code readability, maintainability, and adherence to coding standards.</p>"},{"location":"#4-streamlined-configuration-credential-management","title":"4. Streamlined Configuration &amp; Credential Management","text":"<p>Use built-in generators to quickly set up configurations, manage credentials securely, and update agent settings with ease.</p> <p>By leveraging multiple AI agents and vector-based retrieval, the NX AI Plugin transforms your monorepo into a self-improving development ecosystem, helping teams optimize workflows, enforce standards, and improve overall code quality.</p>"},{"location":"#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ul> <li>Introduction</li> <li>Overview</li> <li>Getting Started</li> <li>Generators</li> <li>Executors</li> <li>Usage Examples</li> <li>Architecture</li> <li>Contributing</li> <li>FAQ</li> </ul>"},{"location":"#introduction","title":"\ud83d\ude80 Introduction","text":""},{"location":"#why-use-nx-ai-plugin","title":"Why Use NX AI Plugin?","text":"<p>Managing large-scale monorepos presents challenges in maintaining code quality, enforcing architecture rules, and ensuring a scalable development workflow. NX AI Plugin addresses these challenges with AI-driven automation, integrating intelligent agents that enhance software development efficiency.</p>"},{"location":"#benefits","title":"Benefits:","text":"<ul> <li>Proactive Code Quality Management \u2013 Identify and fix issues before they cause technical debt.</li> <li>Accelerated Development Workflows \u2013 Automate repetitive review tasks, allowing developers to focus on core features.</li> <li>Standardized Code Practices \u2013 Enforce best practices and ensure consistency across all projects.</li> <li>Scalable &amp; Adaptive \u2013 Customize AI agent configurations as your monorepo evolves.</li> </ul>"},{"location":"#overview","title":"\ud83d\udd0d Overview","text":"<p>The NX AI Plugin introduces a modular AI-powered framework for Nx monorepos. It enables dynamic AI code reviews, agent-driven best practices enforcement, and seamless configuration management.</p>"},{"location":"#key-components","title":"Key Components:","text":""},{"location":"#1-python-backend-service","title":"1\ufe0f\u20e3 Python Backend Service","text":"<ul> <li>Hosts the AI models and processes code analysis.</li> <li>Communicates with external AI APIs (e.g., OpenAI).</li> <li>Uses a vector store (Qdrant, Pinecone) to provide enhanced contextual analysis.</li> </ul>"},{"location":"#2-react-frontend-developer-chat-interface","title":"2\ufe0f\u20e3 React Frontend (Developer Chat Interface)","text":"<ul> <li>Provides an interactive chat for developers to query AI agents.</li> <li>Offers real-time feedback on code changes.</li> <li>Integrates with the backend service to retrieve AI-driven insights.</li> </ul>"},{"location":"#3-nx-plugin-core-integration-layer","title":"3\ufe0f\u20e3 NX Plugin (Core Integration Layer)","text":"<ul> <li>Contains Generators to configure AI agents and plugin settings.</li> <li>Provides Executors to run AI-powered tasks within the Nx workspace.</li> <li>Integrates AI-powered automation into the Nx development workflow.</li> </ul>"},{"location":"#how-it-works","title":"\ud83d\udd04 How It Works","text":"<p>1\ufe0f\u20e3 Developers configure AI agents using the Agent Generator. 2\ufe0f\u20e3 Code updates trigger AI-powered analysis through Nx executors. 3\ufe0f\u20e3 The AI backend service processes requests and retrieves relevant context from the vector store. 4\ufe0f\u20e3 AI-powered feedback is returned to the developer via CLI or frontend chat.</p>"},{"location":"#architecture","title":"\ud83c\udfd7 Architecture","text":"<p>The NX AI Plugin architecture is designed to integrate seamlessly into Nx monorepos while ensuring modularity, scalability, and efficiency. Below is an overview of the system components and their interactions:</p>"},{"location":"#system-context-diagram-c4-level-1","title":"System Context Diagram (C4 - Level 1)","text":""},{"location":"#container-diagram-c4-level-2","title":"Container Diagram (C4 - Level 2)","text":""},{"location":"#sequence-diagram-ai-task-execution-flow","title":"Sequence Diagram (AI Task Execution Flow)","text":""},{"location":"#key-interactions","title":"Key Interactions","text":"<ol> <li>The Nx Plugin generates and executes AI-related tasks based on repository activity.</li> <li>The Python Backend Service processes AI-driven tasks and interacts with the vector store.</li> <li>The Vector Store stores embeddings and context for retrieval-augmented generation (RAG).</li> <li>The React Frontend provides a chat-based interface for interacting with the AI system.</li> </ol> <p>This architecture enables context-aware AI-driven development assistance, leveraging the power of vector-based storage and intelligent automation to optimize development workflows.</p>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Contributions are welcome! Follow these steps:</p> <ol> <li>Fork the repository.</li> <li>Create a new branch (<code>feature/new-awesome-feature</code>).</li> <li>Commit changes with clear descriptions.</li> <li>Submit a pull request.</li> </ol> <p>For more details, check out CONTRIBUTING.md.</p>"},{"location":"#faq","title":"\u2753 FAQ","text":"<p>Q: What AI models are supported? A: Currently, OpenAI models are supported, but additional providers will be added in future updates.</p> <p>Q: How does the vector store improve AI recommendations? A: The vector store (e.g., Qdrant) allows AI agents to retrieve deep contextual information, enhancing code analysis and recommendations.</p> <p>Q: Can I add custom AI agents? A: Yes! The Agent Generator allows you to define and configure custom AI agents for different use cases.</p>"},{"location":"#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Nx Documentation</li> <li>Qdrant Documentation</li> <li>GitHub Repository</li> </ul>"},{"location":"getting-start/","title":"Getting Started with NX AI Plugin","text":"<p>Welcome to the NX AI Plugin! This guide will walk you through the initial setup and configuration to integrate AI-powered agents into your Nx monorepo.</p>"},{"location":"getting-start/#prerequisites","title":"\ud83d\udccc Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Node.js (v20 or later)</li> <li>Nx CLI (<code>npm install -g nx</code> or use <code>npx nx</code>)</li> <li>Docker (for running the backend AI service)</li> </ul>"},{"location":"getting-start/#installation","title":"\ud83d\ude80 Installation","text":"<p>To install the NX AI Plugin in your monorepo, run:</p> <pre><code>npm install nx-ai-plugin --save-dev\n</code></pre> <p>Or if using yarn:</p> <pre><code>yarn add nx-ai-plugin --dev\n</code></pre> <p>After installation, verify the plugin is recognized:</p> <pre><code>npx nx list\n</code></pre>"},{"location":"getting-start/#configuration","title":"\u2699\ufe0f Configuration","text":"<p>The NX AI Plugin requires a YAML configuration file to define key settings. This file is generated using the Repo Setup Generator and should be placed in <code>.agents/nx-ai-plugin.config.yaml</code>.</p>"},{"location":"getting-start/#example-configuration","title":"Example Configuration:","text":"<pre><code>credentialsPath: \"~/.config/nx-ai-plugin/{monorepo-name}\"\ntemplatesPath: \"./.agents/templates\"\n\nvectorStore:\n  type: \"qdrant\"\n  host: \"localhost\"\n  port: 6333\n\nagentsMappingPath: \"./.agents/mapping.yaml\"\nbackendUrl: \"http://localhost:5000\"\n</code></pre> <p>To generate this file, run:</p> <pre><code>npx nx generate nx-ai-plugin:repo-setup\n</code></pre>"},{"location":"getting-start/#credentials-setup","title":"\ud83d\udd11 Credentials Setup","text":"<p>The Setup Credentials Generator securely stores your API keys for authentication.</p> <p>Usage: <pre><code>npx nx generate nx-ai-plugin:setup-credentials --openApiKey=\"YOUR_OPENAI_API_KEY\"\n</code></pre></p> <p>This will create a file at <code>~/.config/nx-ai-plugin/credentials.yaml</code> with your credentials securely stored.</p>"},{"location":"getting-start/#next-steps","title":"\u2705 Next Steps","text":"<p>Now that you\u2019ve installed and configured the plugin, explore the following:</p> <ul> <li>Generators \u2013 Learn how to create and manage AI agents.</li> <li>Executors \u2013 Automate AI-powered tasks within your monorepo.</li> <li>Usage Examples \u2013 Practical use cases to maximize the plugin\u2019s potential.</li> </ul> <p>For further details, check out the Full Documentation.</p>"},{"location":"summary/","title":"Summary","text":"<ul> <li>Home</li> <li>Getting Start</li> <li>Plugin</li> <li>Apps</li> <li>Libs</li> <li>Dependency Graph</li> </ul>"},{"location":"reference/","title":"NX AI Plugin","text":"<p>Welcome to NX AI Plugin \u2013 a powerful tool for integrating AI-powered agents into your Nx monorepo. This plugin helps automate code quality, enforce architectural standards, and optimize development workflows by leveraging AI-driven capabilities and context-aware vector-based interactions.</p> <p> </p>"},{"location":"reference/#overview","title":"Overview","text":"<p>The NX AI Plugin transforms your Nx monorepo into an intelligent development environment by managing specialized AI agents. These agents assist in various tasks such as:</p> <ul> <li>Automated code review and suggestions</li> <li>Refactoring recommendations</li> <li>Architecture validation</li> <li>Integration with a vector store for context-based interactions</li> <li>AI-driven continuous improvement for your projects</li> </ul> <p>The plugin is structured in the following core components:</p> <ol> <li>Generators \u2013 Automate the setup and management of AI agents.</li> <li>Executors \u2013 Execute AI-based tasks, like analyzing changes and providing insights.</li> <li>Backend Python Service \u2013 Handles AI processing and interacts with the vector store.</li> <li>Vector Store Integration \u2013 Stores contextual project data to enhance AI responses.</li> </ol>"},{"location":"reference/#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"reference/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have the following installed:</p> <ul> <li>Node.js (v20 or later)</li> <li>Nx CLI (<code>npm install -g nx</code> or use <code>npx nx</code>)</li> <li>Docker (for running the backend AI service)</li> </ul>"},{"location":"reference/#installation","title":"Installation","text":"<p>To install the NX AI Plugin in your monorepo, run:</p> <pre><code>npm install nx-ai-plugin --save-dev\n</code></pre> <p>Or if using yarn:</p> <pre><code>yarn add nx-ai-plugin --dev\n</code></pre> <p>After installation, verify the plugin is recognized:</p> <pre><code>npx nx list\n</code></pre>"},{"location":"reference/#configuration","title":"\u2699\ufe0f Configuration","text":"<p>The plugin requires a YAML configuration file to define key settings. This file is generated using the Repo Setup Generator and should be placed in <code>.agents/nx-ai-plugin.config.yaml</code>.</p>"},{"location":"reference/#example-configuration","title":"Example Configuration:","text":"<pre><code>credentialsPath: \"~/.config/nx-ai-plugin/{monorepo-name}\"\ntemplatesPath: \"./.agents/templates\"\n\nvectorStore:\n  type: \"qdrant\"\n  host: \"localhost\"\n  port: 6333\n\nagentsMappingPath: \"./.agents/mapping.yaml\"\nbackendUrl: \"http://localhost:5000\"\n</code></pre> <p>To generate this file, run:</p> <pre><code>npx nx generate nx-ai-plugin:repo-setup\n</code></pre>"},{"location":"reference/#generators","title":"\ud83d\udee0\ufe0f Generators","text":""},{"location":"reference/#repo-setup-generator","title":"Repo Setup Generator","text":"<p>Initializes the plugin configuration and creates the agents mapping file.</p> <p>Usage: <pre><code>npx nx generate nx-ai-plugin:repo-setup\n</code></pre></p>"},{"location":"reference/#setup-credentials-generator","title":"Setup Credentials Generator","text":"<p>Securely stores API keys (e.g., OpenAI API Key) for authentication.</p> <p>Usage: <pre><code>npx nx generate nx-ai-plugin:setup-credentials --openApiKey=\"YOUR_OPENAI_API_KEY\"\n</code></pre></p>"},{"location":"reference/#agent-generator","title":"Agent Generator","text":"<p>Adds a new AI agent to the <code>agentsMappingPath</code> configuration file.</p> <p>Usage: <pre><code>npx nx generate nx-ai-plugin:agent-generator \\\n  --agentName=\"goAgent\" \\\n  --agentType=\"go\" \\\n  --promptTemplate=\"You are a Go expert. Please review the diff and suggest improvements.\" \\\n  --configFilePath=\"./.agents/nx-ai-plugin.config.yaml\"\n</code></pre></p>"},{"location":"reference/#executors","title":"\u26a1 Executors","text":"<p>Executors allow you to run AI-driven tasks within your Nx monorepo. More details will be added as the functionality expands.</p>"},{"location":"reference/#usage-examples","title":"\ud83d\udccc Usage Examples","text":"<ol> <li> <p>Set up the repository configuration: <pre><code>npx nx generate nx-ai-plugin:repo-setup\n</code></pre></p> </li> <li> <p>Securely store your API credentials: <pre><code>npx nx generate nx-ai-plugin:setup-credentials --openApiKey=\"YOUR_OPENAI_API_KEY\"\n</code></pre></p> </li> <li> <p>Add a new AI agent: <pre><code>npx nx generate nx-ai-plugin:agent-generator --agentName=\"typescriptAgent\" --agentType=\"ts\"\n</code></pre></p> </li> <li> <p>Run AI-powered analysis (coming soon)</p> </li> </ol>"},{"location":"reference/#contributing","title":"\ud83d\udca1 Contributing","text":"<p>We welcome contributions! To get started:</p> <p>For more details, check out the CONTRIBUTING.md.</p>"},{"location":"reference/#faq","title":"\u2753 FAQ","text":"<p>Q: What AI models can I use with this plugin? A: Currently, OpenAI models are supported, but we plan to expand compatibility with other providers.</p> <p>Q: How does the vector store work? A: The plugin integrates with Qdrant for storing and retrieving project-related embeddings to enhance AI context awareness.</p> <p>Q: Can I add custom AI agents? A: Yes! The Agent Generator allows you to define custom AI agents tailored to your needs.</p>"},{"location":"reference/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Nx Documentation</li> </ul>"},{"location":"reference/CONTRIBUTING/","title":"Contributing to NX AI Plugin","text":"<p>Thank you for your interest in contributing to the NX AI Plugin! We welcome contributions from the community and value your ideas, bug reports, and pull requests. By contributing to this project, you help us improve its quality, functionality, and usability for everyone using Nx monorepos.</p>"},{"location":"reference/CONTRIBUTING/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started</li> <li>Code of Conduct</li> <li>Reporting Issues</li> <li>Pull Request Guidelines</li> <li>Coding Standards</li> <li>Testing</li> <li>Commit Messages</li> <li>Documentation</li> <li>Additional Resources</li> </ul>"},{"location":"reference/CONTRIBUTING/#getting-started","title":"Getting Started","text":"<p>Before you begin, please ensure you have the following installed:</p> <ul> <li>Node.js (v20 or later)</li> <li>Nx CLI (if not installed globally, you can use <code>npx nx</code>)</li> <li>Python (3.12 or later)<ul> <li>Poetry (2.1.1 or later)</li> </ul> </li> <li>Docker</li> </ul> <p>To set up your development environment:</p> <ol> <li> <p>Fork the Repository:    Click the \"Fork\" button on the GitHub page to create your own copy.</p> </li> <li> <p>Clone Your Fork Locally: <pre><code>git clone https://github.com/&lt;your-username&gt;/nx-ai-plugin.git\ncd nx-ai-plugin\n</code></pre></p> </li> <li> <p>Install Dependencies:     Install the Node dependencies:     <pre><code>npm install\n</code></pre>     Then, install the Python dependencies using Poetry:     <pre><code>poetry install --no-root\n</code></pre></p> </li> <li> <p>Setup Husky     Husky is used to manage Git hooks and ensure code quality before commits. To set it up, run:     <pre><code>npm rum prepare\n</code></pre></p> </li> <li> <p>Run the Linter <pre><code>npx nx lint &lt;project&gt;\n</code></pre></p> </li> <li> <p>Run Affected Projects <pre><code>npx nx affected -t &lt;command&gt;\n</code></pre></p> </li> </ol>"},{"location":"reference/CONTRIBUTING/#reporting-issues","title":"Reporting Issues","text":"<p>If you encounter a bug or have a feature request, please check the issue tracker first to see if it has already been reported. If not, open a new issue with a clear description and steps to reproduce the problem.</p>"},{"location":"reference/CONTRIBUTING/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>We appreciate your contributions! To ensure a smooth review process, please follow these guidelines:</p> <ul> <li> <p>Fork the Repository and Create a Branch:   Create a branch off of <code>main</code> for your feature or bug fix:   <pre><code>git checkout -b feat/my-new-feature\n</code></pre></p> </li> <li> <p>Write Tests:   Ensure that any new functionality is covered by unit and/or e2e tests. Our tests are run using Nx's testing utilities and Jest.</p> </li> <li> <p>Follow the Coding Standards:   Write clean, readable code that adheres to our TypeScript, ESLint, and Prettier configurations.</p> </li> <li> <p>Update Documentation:   Update the documentation (including this CONTRIBUTING file if necessary) to reflect changes or new features.</p> </li> <li> <p>Submit a Pull Request:   Once your changes are complete and tested, open a pull request (PR) against the <code>main</code> branch. Include a clear title and description, referencing any related issues.</p> </li> </ul>"},{"location":"reference/CONTRIBUTING/#coding-standards","title":"Coding Standards","text":"<ul> <li>Language:   Use TypeScript for plugin development. Follow the style guidelines enforced by ESLint and Prettier.</li> <li>File Organization:   Maintain a clear directory structure\u2014generators in <code>src/generators/</code>, executors in <code>src/executors/</code>, etc.</li> <li>Comments and Documentation:   Write clear comments and update documentation when you modify functionality.</li> </ul>"},{"location":"reference/CONTRIBUTING/#testing","title":"Testing","text":"<ul> <li>Unit Tests:   Write unit tests for any new functionality using Jest and Nx DevKit's testing utilities.</li> <li>End-to-End (E2E) Tests:   Ensure that your changes integrate correctly in a simulated Nx workspace. Run:   <pre><code>npx nx e2e nx-ai-plugin-e2e\n</code></pre></li> <li>Continuous Integration:   Our CI pipeline (configured in <code>.github/workflows/ci.yml</code> and <code>nx-main.yml</code>) runs tests and lint checks on every PR.</li> </ul>"},{"location":"reference/CONTRIBUTING/#commit-messages","title":"Commit Messages","text":"<p>We follow the Conventional Commits standard. Use the following prefixes for your commit messages:</p> <ul> <li>feat: for new features</li> <li>fix: for bug fixes</li> <li>docs: for documentation changes</li> <li>style: for formatting changes (white-space, etc.)</li> <li>refactor: for code refactoring without feature changes</li> <li>test: for adding or updating tests</li> <li>chore: for changes that don't modify src or test files</li> </ul> <p>Example: <pre><code>feat(agent-generator): add support for upserting new agents\n</code></pre></p>"},{"location":"reference/CONTRIBUTING/#documentation","title":"Documentation","text":"<ul> <li>Site Documentation:   Our documentation is hosted on GitHub Pages: NX AI Plugin Docs.</li> <li>Writing Docs:   When you add new features or change functionality, update the corresponding markdown files in the <code>docs/</code> directory. We use MkDocs with the Material theme for a modern, responsive documentation site.</li> <li>Generating API Documentation:   We leverage tools like <code>mkdocstrings</code> to generate API references from our TypeScript and Python code. Ensure that any public interfaces are well-documented.</li> </ul>"},{"location":"reference/CONTRIBUTING/#additional-resources","title":"Additional Resources","text":"<ul> <li>Nx Documentation</li> <li>TypeScript Documentation</li> <li>Jest Documentation</li> <li>Conventional Commits</li> <li>Material for MkDocs</li> </ul>"},{"location":"reference/CONTRIBUTING/#thank-you","title":"Thank You","text":"<p>Thank you for contributing to NX AI Plugin! Your help makes this project better for everyone, and we appreciate your dedication to high-quality, maintainable code.</p>"},{"location":"reference/docs/","title":"NX AI Plugin Documentation","text":"<p>Welcome to the NX AI Plugin\u2014a next-generation solution for automating code quality, enforcing architectural standards, and enhancing developer productivity within your Nx monorepo. This plugin enables seamless integration of AI-powered agents into your development workflow, improving efficiency and ensuring adherence to best practices.</p>"},{"location":"reference/docs/#key-features","title":"Key Features","text":""},{"location":"reference/docs/#1-create-and-manage-ai-agents","title":"1. Create and Manage AI Agents","text":"<p>Easily define, configure, and deploy specialized AI agents that enforce coding rules, suggest improvements, and help maintain consistency across your codebase.</p>"},{"location":"reference/docs/#2-context-aware-vector-store","title":"2. Context-Aware Vector Store","text":"<p>Integrate a vector store to enable dynamic, memory-efficient interactions. Agents access deep contextual insights, allowing them to provide more accurate recommendations based on project history and structure.</p>"},{"location":"reference/docs/#3-ai-powered-code-reviews","title":"3. AI-Powered Code Reviews","text":"<p>Automate and streamline the code review process with AI-generated feedback, improving code readability, maintainability, and adherence to coding standards.</p>"},{"location":"reference/docs/#4-streamlined-configuration-credential-management","title":"4. Streamlined Configuration &amp; Credential Management","text":"<p>Use built-in generators to quickly set up configurations, manage credentials securely, and update agent settings with ease.</p> <p>By leveraging multiple AI agents and vector-based retrieval, the NX AI Plugin transforms your monorepo into a self-improving development ecosystem, helping teams optimize workflows, enforce standards, and improve overall code quality.</p>"},{"location":"reference/docs/#table-of-contents","title":"\ud83d\udcda Table of Contents","text":"<ul> <li>Introduction</li> <li>Overview</li> <li>Getting Started</li> <li>Generators</li> <li>Executors</li> <li>Usage Examples</li> <li>Architecture</li> <li>Contributing</li> <li>FAQ</li> </ul>"},{"location":"reference/docs/#introduction","title":"\ud83d\ude80 Introduction","text":""},{"location":"reference/docs/#why-use-nx-ai-plugin","title":"Why Use NX AI Plugin?","text":"<p>Managing large-scale monorepos presents challenges in maintaining code quality, enforcing architecture rules, and ensuring a scalable development workflow. NX AI Plugin addresses these challenges with AI-driven automation, integrating intelligent agents that enhance software development efficiency.</p>"},{"location":"reference/docs/#benefits","title":"Benefits:","text":"<ul> <li>Proactive Code Quality Management \u2013 Identify and fix issues before they cause technical debt.</li> <li>Accelerated Development Workflows \u2013 Automate repetitive review tasks, allowing developers to focus on core features.</li> <li>Standardized Code Practices \u2013 Enforce best practices and ensure consistency across all projects.</li> <li>Scalable &amp; Adaptive \u2013 Customize AI agent configurations as your monorepo evolves.</li> </ul>"},{"location":"reference/docs/#overview","title":"\ud83d\udd0d Overview","text":"<p>The NX AI Plugin introduces a modular AI-powered framework for Nx monorepos. It enables dynamic AI code reviews, agent-driven best practices enforcement, and seamless configuration management.</p>"},{"location":"reference/docs/#key-components","title":"Key Components:","text":""},{"location":"reference/docs/#1-python-backend-service","title":"1\ufe0f\u20e3 Python Backend Service","text":"<ul> <li>Hosts the AI models and processes code analysis.</li> <li>Communicates with external AI APIs (e.g., OpenAI).</li> <li>Uses a vector store (Qdrant, Pinecone) to provide enhanced contextual analysis.</li> </ul>"},{"location":"reference/docs/#2-react-frontend-developer-chat-interface","title":"2\ufe0f\u20e3 React Frontend (Developer Chat Interface)","text":"<ul> <li>Provides an interactive chat for developers to query AI agents.</li> <li>Offers real-time feedback on code changes.</li> <li>Integrates with the backend service to retrieve AI-driven insights.</li> </ul>"},{"location":"reference/docs/#3-nx-plugin-core-integration-layer","title":"3\ufe0f\u20e3 NX Plugin (Core Integration Layer)","text":"<ul> <li>Contains Generators to configure AI agents and plugin settings.</li> <li>Provides Executors to run AI-powered tasks within the Nx workspace.</li> <li>Integrates AI-powered automation into the Nx development workflow.</li> </ul>"},{"location":"reference/docs/#how-it-works","title":"\ud83d\udd04 How It Works","text":"<p>1\ufe0f\u20e3 Developers configure AI agents using the Agent Generator. 2\ufe0f\u20e3 Code updates trigger AI-powered analysis through Nx executors. 3\ufe0f\u20e3 The AI backend service processes requests and retrieves relevant context from the vector store. 4\ufe0f\u20e3 AI-powered feedback is returned to the developer via CLI or frontend chat.</p>"},{"location":"reference/docs/#architecture","title":"\ud83c\udfd7 Architecture","text":"<p>The NX AI Plugin architecture is designed to integrate seamlessly into Nx monorepos while ensuring modularity, scalability, and efficiency. Below is an overview of the system components and their interactions:</p>"},{"location":"reference/docs/#system-context-diagram-c4-level-1","title":"System Context Diagram (C4 - Level 1)","text":""},{"location":"reference/docs/#container-diagram-c4-level-2","title":"Container Diagram (C4 - Level 2)","text":""},{"location":"reference/docs/#sequence-diagram-ai-task-execution-flow","title":"Sequence Diagram (AI Task Execution Flow)","text":""},{"location":"reference/docs/#key-interactions","title":"Key Interactions","text":"<ol> <li>The Nx Plugin generates and executes AI-related tasks based on repository activity.</li> <li>The Python Backend Service processes AI-driven tasks and interacts with the vector store.</li> <li>The Vector Store stores embeddings and context for retrieval-augmented generation (RAG).</li> <li>The React Frontend provides a chat-based interface for interacting with the AI system.</li> </ol> <p>This architecture enables context-aware AI-driven development assistance, leveraging the power of vector-based storage and intelligent automation to optimize development workflows.</p>"},{"location":"reference/docs/#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Contributions are welcome! Follow these steps:</p> <ol> <li>Fork the repository.</li> <li>Create a new branch (<code>feature/new-awesome-feature</code>).</li> <li>Commit changes with clear descriptions.</li> <li>Submit a pull request.</li> </ol> <p>For more details, check out CONTRIBUTING.md.</p>"},{"location":"reference/docs/#faq","title":"\u2753 FAQ","text":"<p>Q: What AI models are supported? A: Currently, OpenAI models are supported, but additional providers will be added in future updates.</p> <p>Q: How does the vector store improve AI recommendations? A: The vector store (e.g., Qdrant) allows AI agents to retrieve deep contextual information, enhancing code analysis and recommendations.</p> <p>Q: Can I add custom AI agents? A: Yes! The Agent Generator allows you to define and configure custom AI agents for different use cases.</p>"},{"location":"reference/docs/#additional-resources","title":"\ud83d\udcda Additional Resources","text":"<ul> <li>Nx Documentation</li> <li>Qdrant Documentation</li> <li>GitHub Repository</li> </ul>"},{"location":"reference/docs/getting-start/","title":"Getting Started with NX AI Plugin","text":"<p>Welcome to the NX AI Plugin! This guide will walk you through the initial setup and configuration to integrate AI-powered agents into your Nx monorepo.</p>"},{"location":"reference/docs/getting-start/#prerequisites","title":"\ud83d\udccc Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Node.js (v20 or later)</li> <li>Nx CLI (<code>npm install -g nx</code> or use <code>npx nx</code>)</li> <li>Docker (for running the backend AI service)</li> </ul>"},{"location":"reference/docs/getting-start/#installation","title":"\ud83d\ude80 Installation","text":"<p>To install the NX AI Plugin in your monorepo, run:</p> <pre><code>npm install nx-ai-plugin --save-dev\n</code></pre> <p>Or if using yarn:</p> <pre><code>yarn add nx-ai-plugin --dev\n</code></pre> <p>After installation, verify the plugin is recognized:</p> <pre><code>npx nx list\n</code></pre>"},{"location":"reference/docs/getting-start/#configuration","title":"\u2699\ufe0f Configuration","text":"<p>The NX AI Plugin requires a YAML configuration file to define key settings. This file is generated using the Repo Setup Generator and should be placed in <code>.agents/nx-ai-plugin.config.yaml</code>.</p>"},{"location":"reference/docs/getting-start/#example-configuration","title":"Example Configuration:","text":"<pre><code>credentialsPath: \"~/.config/nx-ai-plugin/{monorepo-name}\"\ntemplatesPath: \"./.agents/templates\"\n\nvectorStore:\n  type: \"qdrant\"\n  host: \"localhost\"\n  port: 6333\n\nagentsMappingPath: \"./.agents/mapping.yaml\"\nbackendUrl: \"http://localhost:5000\"\n</code></pre> <p>To generate this file, run:</p> <pre><code>npx nx generate nx-ai-plugin:repo-setup\n</code></pre>"},{"location":"reference/docs/getting-start/#credentials-setup","title":"\ud83d\udd11 Credentials Setup","text":"<p>The Setup Credentials Generator securely stores your API keys for authentication.</p> <p>Usage: <pre><code>npx nx generate nx-ai-plugin:setup-credentials --openApiKey=\"YOUR_OPENAI_API_KEY\"\n</code></pre></p> <p>This will create a file at <code>~/.config/nx-ai-plugin/credentials.yaml</code> with your credentials securely stored.</p>"},{"location":"reference/docs/getting-start/#next-steps","title":"\u2705 Next Steps","text":"<p>Now that you\u2019ve installed and configured the plugin, explore the following:</p> <ul> <li>Generators \u2013 Learn how to create and manage AI agents.</li> <li>Executors \u2013 Automate AI-powered tasks within your monorepo.</li> <li>Usage Examples \u2013 Practical use cases to maximize the plugin\u2019s potential.</li> </ul> <p>For further details, check out the Full Documentation.</p>"},{"location":"reference/docs/summary/","title":"Summary","text":"<ul> <li>Home</li> <li>Getting Start</li> <li>Plugin</li> <li>Apps</li> <li>Libs</li> <li>Dependency Graph</li> </ul>"},{"location":"reference/nx-ai-plugin/","title":"nx-ai-plugin","text":"<p>This library was generated with Nx.</p>"},{"location":"reference/nx-ai-plugin/#building","title":"Building","text":"<p>Run <code>nx build nx-ai-plugin</code> to build the library.</p>"},{"location":"reference/nx-ai-plugin/#running-unit-tests","title":"Running unit tests","text":"<p>Run <code>nx test nx-ai-plugin</code> to execute the unit tests via Jest.</p>"}]}