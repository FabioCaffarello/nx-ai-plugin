{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NX AI Plugin Documentation","text":"<p>Welcome to the NX AI Plugin\u2014your next-generation solution for automating code quality and enforcing architectural standards across your Nx monorepo. This plugin empowers you to:</p> <ul> <li> <p>Create and Manage Multiple AI Agents:   Define and deploy specialized agents that apply your custom coding rules, best practices, and architectural guidelines across diverse projects.</p> </li> <li> <p>Leverage a Context-Aware Vector Store:   Integrate a vector store to enable powerful, dynamic prompt interactions. This allows your agents to access deep contextual insights, tailoring recommendations to the specifics of your codebase.</p> </li> <li> <p>Automate Code Reviews and Quality Checks:   Seamlessly trigger AI-driven reviews to catch inconsistencies, improve code readability, and ensure adherence to your organization\u2019s standards.</p> </li> <li> <p>Streamline Configuration and Credential Management:   Use built-in generators and executors to quickly set up plugin configuration, manage sensitive credentials securely, and update agent settings with ease.</p> </li> </ul> <p>By combining the power of multiple AI agents with advanced vector-based context retrieval, the NX AI Plugin transforms your Nx workspace into an intelligent, self-improving development environment. Whether you're looking to enforce code standards, accelerate code reviews, or optimize your development workflow, the NX AI Plugin provides a comprehensive toolkit to help you achieve these goals.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>Overview</li> <li>Installation</li> <li>Configuration</li> <li>Plugin Config File</li> <li>Credentials Setup</li> <li>Generators</li> <li>Repo Setup Generator</li> <li>Setup Credentials Generator</li> <li>Agent Generator</li> <li>Executors</li> <li>Usage Examples</li> <li>Architecture</li> <li>Contributing</li> <li>FAQ</li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<p>In today's fast-paced development environments, maintaining high code quality and enforcing consistent architectural standards across large monorepos can be challenging. The NX AI Plugin is designed to address these challenges head-on by integrating advanced, AI-driven capabilities directly into your Nx workspace.</p>"},{"location":"#why-it-matters","title":"Why It Matters","text":"<p>The NX AI Plugin transforms your Nx monorepo into an intelligent, self-improving ecosystem. By combining the power of multiple AI agents with advanced vector-based context retrieval, your team gains:</p> <ul> <li>Enhanced Code Quality:   Proactively identify and resolve issues before they become costly problems.</li> <li>Increased Development Velocity:   Automate repetitive review tasks and free up developers to focus on high-value work.</li> <li>Consistent Architectural Standards:   Ensure that every project, regardless of size or language, adheres to your organization\u2019s best practices.</li> <li>Scalable, Adaptive Workflows:   Easily extend and customize the plugin as your codebase evolves, ensuring that your development environment remains cutting-edge.</li> </ul> <p>Whether you're looking to enforce rigorous coding standards, accelerate your review cycles, or simply optimize your development workflow, the NX AI Plugin provides a comprehensive toolkit to elevate your codebase to the next level.</p>"},{"location":"#overview","title":"Overview","text":"<p>The NX AI Plugin is a transformative tool designed to seamlessly integrate AI-driven code quality and architectural enforcement into your Nx monorepo. It harnesses the power of advanced language models and a context-aware vector store to deliver dynamic, intelligent code reviews and analyses. With a modular architecture built on generators and executors, the plugin empowers you to create and manage multiple specialized AI agents that enforce your custom coding rules and best practices across diverse projects.</p>"},{"location":"#key-components","title":"Key Components","text":"<p>The NX AI Plugin solution is built on a modular architecture consisting of three core components. Together, these components enable dynamic, context-aware code reviews, agent management, and interactive developer assistance within your Nx monorepo.</p>"},{"location":"#1-python-backend-service","title":"1. Python Backend Service","text":"<p>Purpose: This service is the engine that powers the AI functionalities. It orchestrates interactions with external APIs, processes code inputs, and leverages a context-aware vector store to drive retrieval-augmented generation (RAG).</p> <p>Core Functions:</p> <ul> <li> <p>API Integration:   Communicates with external AI services (e.g., OpenAI) to process code diffs and generate intelligent insights.</p> </li> <li> <p>Contextual Data Retrieval:   Interacts with a vector store (such as Qdrant, Pinecone, or FAISS) to fetch deep contextual information, ensuring that agent responses are tailored to the specific nuances of your codebase.</p> </li> </ul> <ul> <li>Request Orchestration:   Serves as the central hub for executing AI-driven tasks triggered by the NX plugin, ensuring that data flows seamlessly between external APIs and your monorepo.</li> </ul>"},{"location":"#2-react-frontend-developer-chat-interface","title":"2. React Frontend (Developer Chat Interface)","text":"<p>Purpose: Provides an intuitive chat-based interface for developers to interact with the AI system in real time. This frontend enables developers to ask questions, receive code review suggestions, and engage in interactive troubleshooting directly from their development environment.</p> <p>Core Functions:</p> <ul> <li> <p>Chat Interface:   A responsive, user-friendly chat UI that allows developers to send queries and receive detailed AI-generated responses.</p> </li> <li> <p>Real-Time Feedback:   Displays context-aware recommendations and insights, ensuring that suggestions are relevant and actionable.</p> </li> <li> <p>Integration with Backend:   Communicates with the Python backend service via HTTP, sending user inputs and displaying returned AI insights.</p> </li> </ul>"},{"location":"#3-nx-plugin-orchestrator-integration-layer","title":"3. NX Plugin (Orchestrator &amp; Integration Layer)","text":"<p>Purpose: Acts as the bridge between your Nx monorepo and the AI backend service. This plugin integrates AI-driven tasks into your development workflow, automating configuration, agent management, and code review processes via Nx generators and executors.</p> <p>Core Functions:</p> <ul> <li> <p>Generators:   Provide interactive commands to set up the plugin configuration, manage credentials, and upsert new agents. These generators help initialize essential files (like the YAML configuration and agents mapping) and ensure consistency across projects.</p> </li> <li> <p>Executors:   Enable the execution of AI-driven tasks as part of your CI/CD pipelines. For example, they can trigger code reviews and quality checks on demand.</p> </li> </ul> <ul> <li>Seamless Integration:   Ensures that the AI functionalities are fully integrated into your Nx workspace, making it easy to trigger tasks through standard Nx commands.</li> </ul>"},{"location":"#how-they-work-together","title":"How They Work Together","text":"<ul> <li>Integration Flow: </li> </ul>"},{"location":"summary/","title":"Summary","text":"<ul> <li>Architecture</li> <li>Plugin</li> <li>Apps</li> <li>Libs</li> <li>Dependency Graph</li> </ul>"},{"location":"reference/","title":"NX AI Plugin","text":"<p>Welcome to NX AI Plugin \u2013 your next-generation solution for automating code quality, enforcing architectural standards, and enhancing developer productivity in your Nx monorepo. With advanced AI-driven capabilities, our plugin empowers you to create, manage, and customize multiple specialized agents that seamlessly integrate into your development workflow.</p> <p> </p>"},{"location":"reference/#overview","title":"Overview","text":"<p>The NX AI Plugin transforms your Nx monorepo into an intelligent, self-improving ecosystem by combining the power of multiple AI agents with context-aware vector-based prompt interactions. Its core components include:</p>"},{"location":"reference/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Getting Started</li> <li>Configuration</li> <li>Plugin Config File</li> <li>Credentials Setup</li> <li>Generators</li> <li>Repo Setup Generator</li> <li>Setup Credentials Generator</li> <li>Agent Generator</li> <li>Executors</li> <li>Usage Examples</li> <li>CI Integration</li> <li>Contributing</li> <li>FAQ</li> <li>Additional Resources</li> </ul>"},{"location":"reference/#configuration","title":"Configuration","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Node.js (v20 or later)</li> <li>Nx CLI (if not installed globally, use <code>npx nx</code>)</li> <li>Docker</li> </ul>"},{"location":"reference/#plugin-config-file","title":"Plugin Config File","text":"<p>The Repo Setup Generator creates a centralized YAML configuration file (e.g., <code>./.agents/nx-ai-plugin.config.yaml</code>) that defines key settings:</p> <pre><code>credentialsPath: \"~/.config/nx-ai-plugin/{monorepo-name}\"\ntemplatesPath: \"./.agents/templates\"\n\nvectorStore:\n  type: \"qdrant\"\n  host: \"localhost\"\n  port: 6333\n\nagentsMappingPath: \"./.agents/mapping.yaml\"\nbackendUrl: \"http://localhost:5000\"\n</code></pre> <p>To generate or update this file, run:</p> <pre><code>npx nx generate nx-ai-plugin:repo-setup\n</code></pre>"},{"location":"reference/#credentials-setup","title":"Credentials Setup","text":"<p>The Setup Credentials Generator securely stores your OpenAI API key (and other credentials) in your home directory. For example, run:</p> <pre><code>npx nx generate nx-ai-plugin:setup-credentials --openApiKey=\"YOUR_OPENAI_API_KEY\"\n</code></pre> <p>This will create or update a file at <code>~/.config/nx-ai-plugin/credentials.yaml</code>.</p>"},{"location":"reference/#generators","title":"Generators","text":""},{"location":"reference/#repo-setup-generator","title":"Repo Setup Generator","text":"<p>Initializes the plugin configuration and creates the agents mapping file with default values.</p> <p>Usage:</p> <pre><code>npx nx generate nx-ai-plugin:repo-setup\n</code></pre>"},{"location":"reference/#setup-credentials-generator","title":"Setup Credentials Generator","text":"<p>Upserts your API keys into a YAML file in your home directory for secure credential management.</p> <p>Usage:</p> <pre><code>npx nx generate nx-ai-plugin:setup-credentials --openApiKey=\"YOUR_OPENAI_API_KEY\"\n</code></pre>"},{"location":"reference/#agent-generator","title":"Agent Generator","text":"<p>Upserts a new agent into the agents mapping file. It reads the <code>agentsMappingPath</code> from the plugin config and updates it with the provided agent details.</p> <p>Usage:</p> <pre><code>npx nx generate nx-ai-plugin:agent-generator --agentName=\"goAgent\" --agentType=\"go\" --promptTemplate=\"You are a Go expert. Please review the diff and suggest improvements.\" --configFilePath=\"./.agents/nx-ai-plugin.config.yaml\"\n</code></pre>"},{"location":"reference/CONTRIBUTING/","title":"Contributing to NX AI Plugin","text":"<p>Thank you for your interest in contributing to the NX AI Plugin! We welcome contributions from the community and value your ideas, bug reports, and pull requests. By contributing to this project, you help us improve its quality, functionality, and usability for everyone using Nx monorepos.</p>"},{"location":"reference/CONTRIBUTING/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started</li> <li>Code of Conduct</li> <li>Reporting Issues</li> <li>Pull Request Guidelines</li> <li>Coding Standards</li> <li>Testing</li> <li>Commit Messages</li> <li>Documentation</li> <li>Additional Resources</li> </ul>"},{"location":"reference/CONTRIBUTING/#getting-started","title":"Getting Started","text":"<p>Before you begin, please ensure you have the following installed:</p> <ul> <li>Node.js (v20 or later)</li> <li>Nx CLI (if not installed globally, you can use <code>npx nx</code>)</li> <li>Python (3.12 or later)<ul> <li>Poetry (2.1.1 or later)</li> </ul> </li> <li>Docker</li> </ul> <p>To set up your development environment:</p> <ol> <li> <p>Fork the Repository:    Click the \"Fork\" button on the GitHub page to create your own copy.</p> </li> <li> <p>Clone Your Fork Locally: <pre><code>git clone https://github.com/&lt;your-username&gt;/nx-ai-plugin.git\ncd nx-ai-plugin\n</code></pre></p> </li> <li> <p>Install Dependencies:     Install the Node dependencies:     <pre><code>npm install\n</code></pre>     Then, install the Python dependencies using Poetry:     <pre><code>poetry install --no-root\n</code></pre></p> </li> <li> <p>Setup Husky     Husky is used to manage Git hooks and ensure code quality before commits. To set it up, run:     <pre><code>npm rum prepare\n</code></pre></p> </li> <li> <p>Run the Linter <pre><code>npx nx lint &lt;project&gt;\n</code></pre></p> </li> <li> <p>Run Affected Projects <pre><code>npx nx affected -t &lt;command&gt;\n</code></pre></p> </li> </ol>"},{"location":"reference/CONTRIBUTING/#reporting-issues","title":"Reporting Issues","text":"<p>If you encounter a bug or have a feature request, please check the issue tracker first to see if it has already been reported. If not, open a new issue with a clear description and steps to reproduce the problem.</p>"},{"location":"reference/CONTRIBUTING/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>We appreciate your contributions! To ensure a smooth review process, please follow these guidelines:</p> <ul> <li> <p>Fork the Repository and Create a Branch:   Create a branch off of <code>main</code> for your feature or bug fix:   <pre><code>git checkout -b feat/my-new-feature\n</code></pre></p> </li> <li> <p>Write Tests:   Ensure that any new functionality is covered by unit and/or e2e tests. Our tests are run using Nx's testing utilities and Jest.</p> </li> <li> <p>Follow the Coding Standards:   Write clean, readable code that adheres to our TypeScript, ESLint, and Prettier configurations.</p> </li> <li> <p>Update Documentation:   Update the documentation (including this CONTRIBUTING file if necessary) to reflect changes or new features.</p> </li> <li> <p>Submit a Pull Request:   Once your changes are complete and tested, open a pull request (PR) against the <code>main</code> branch. Include a clear title and description, referencing any related issues.</p> </li> </ul>"},{"location":"reference/CONTRIBUTING/#coding-standards","title":"Coding Standards","text":"<ul> <li>Language:   Use TypeScript for plugin development. Follow the style guidelines enforced by ESLint and Prettier.</li> <li>File Organization:   Maintain a clear directory structure\u2014generators in <code>src/generators/</code>, executors in <code>src/executors/</code>, etc.</li> <li>Comments and Documentation:   Write clear comments and update documentation when you modify functionality.</li> </ul>"},{"location":"reference/CONTRIBUTING/#testing","title":"Testing","text":"<ul> <li>Unit Tests:   Write unit tests for any new functionality using Jest and Nx DevKit's testing utilities.</li> <li>End-to-End (E2E) Tests:   Ensure that your changes integrate correctly in a simulated Nx workspace. Run:   <pre><code>npx nx e2e nx-ai-plugin-e2e\n</code></pre></li> <li>Continuous Integration:   Our CI pipeline (configured in <code>.github/workflows/ci.yml</code> and <code>nx-main.yml</code>) runs tests and lint checks on every PR.</li> </ul>"},{"location":"reference/CONTRIBUTING/#commit-messages","title":"Commit Messages","text":"<p>We follow the Conventional Commits standard. Use the following prefixes for your commit messages:</p> <ul> <li>feat: for new features</li> <li>fix: for bug fixes</li> <li>docs: for documentation changes</li> <li>style: for formatting changes (white-space, etc.)</li> <li>refactor: for code refactoring without feature changes</li> <li>test: for adding or updating tests</li> <li>chore: for changes that don't modify src or test files</li> </ul> <p>Example: <pre><code>feat(agent-generator): add support for upserting new agents\n</code></pre></p>"},{"location":"reference/CONTRIBUTING/#documentation","title":"Documentation","text":"<ul> <li>Site Documentation:   Our documentation is hosted on GitHub Pages: NX AI Plugin Docs.</li> <li>Writing Docs:   When you add new features or change functionality, update the corresponding markdown files in the <code>docs/</code> directory. We use MkDocs with the Material theme for a modern, responsive documentation site.</li> <li>Generating API Documentation:   We leverage tools like <code>mkdocstrings</code> to generate API references from our TypeScript and Python code. Ensure that any public interfaces are well-documented.</li> </ul>"},{"location":"reference/CONTRIBUTING/#additional-resources","title":"Additional Resources","text":"<ul> <li>Nx Documentation</li> <li>TypeScript Documentation</li> <li>Jest Documentation</li> <li>Conventional Commits</li> <li>Material for MkDocs</li> </ul>"},{"location":"reference/CONTRIBUTING/#thank-you","title":"Thank You","text":"<p>Thank you for contributing to NX AI Plugin! Your help makes this project better for everyone, and we appreciate your dedication to high-quality, maintainable code.</p>"},{"location":"reference/docs/","title":"NX AI Plugin Documentation","text":"<p>Welcome to the NX AI Plugin\u2014your next-generation solution for automating code quality and enforcing architectural standards across your Nx monorepo. This plugin empowers you to:</p> <ul> <li> <p>Create and Manage Multiple AI Agents:   Define and deploy specialized agents that apply your custom coding rules, best practices, and architectural guidelines across diverse projects.</p> </li> <li> <p>Leverage a Context-Aware Vector Store:   Integrate a vector store to enable powerful, dynamic prompt interactions. This allows your agents to access deep contextual insights, tailoring recommendations to the specifics of your codebase.</p> </li> <li> <p>Automate Code Reviews and Quality Checks:   Seamlessly trigger AI-driven reviews to catch inconsistencies, improve code readability, and ensure adherence to your organization\u2019s standards.</p> </li> <li> <p>Streamline Configuration and Credential Management:   Use built-in generators and executors to quickly set up plugin configuration, manage sensitive credentials securely, and update agent settings with ease.</p> </li> </ul> <p>By combining the power of multiple AI agents with advanced vector-based context retrieval, the NX AI Plugin transforms your Nx workspace into an intelligent, self-improving development environment. Whether you're looking to enforce code standards, accelerate code reviews, or optimize your development workflow, the NX AI Plugin provides a comprehensive toolkit to help you achieve these goals.</p>"},{"location":"reference/docs/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>Overview</li> <li>Installation</li> <li>Configuration</li> <li>Plugin Config File</li> <li>Credentials Setup</li> <li>Generators</li> <li>Repo Setup Generator</li> <li>Setup Credentials Generator</li> <li>Agent Generator</li> <li>Executors</li> <li>Usage Examples</li> <li>Architecture</li> <li>Contributing</li> <li>FAQ</li> </ul>"},{"location":"reference/docs/#introduction","title":"Introduction","text":"<p>In today's fast-paced development environments, maintaining high code quality and enforcing consistent architectural standards across large monorepos can be challenging. The NX AI Plugin is designed to address these challenges head-on by integrating advanced, AI-driven capabilities directly into your Nx workspace.</p>"},{"location":"reference/docs/#why-it-matters","title":"Why It Matters","text":"<p>The NX AI Plugin transforms your Nx monorepo into an intelligent, self-improving ecosystem. By combining the power of multiple AI agents with advanced vector-based context retrieval, your team gains:</p> <ul> <li>Enhanced Code Quality:   Proactively identify and resolve issues before they become costly problems.</li> <li>Increased Development Velocity:   Automate repetitive review tasks and free up developers to focus on high-value work.</li> <li>Consistent Architectural Standards:   Ensure that every project, regardless of size or language, adheres to your organization\u2019s best practices.</li> <li>Scalable, Adaptive Workflows:   Easily extend and customize the plugin as your codebase evolves, ensuring that your development environment remains cutting-edge.</li> </ul> <p>Whether you're looking to enforce rigorous coding standards, accelerate your review cycles, or simply optimize your development workflow, the NX AI Plugin provides a comprehensive toolkit to elevate your codebase to the next level.</p>"},{"location":"reference/docs/#overview","title":"Overview","text":"<p>The NX AI Plugin is a transformative tool designed to seamlessly integrate AI-driven code quality and architectural enforcement into your Nx monorepo. It harnesses the power of advanced language models and a context-aware vector store to deliver dynamic, intelligent code reviews and analyses. With a modular architecture built on generators and executors, the plugin empowers you to create and manage multiple specialized AI agents that enforce your custom coding rules and best practices across diverse projects.</p>"},{"location":"reference/docs/#key-components","title":"Key Components","text":"<p>The NX AI Plugin solution is built on a modular architecture consisting of three core components. Together, these components enable dynamic, context-aware code reviews, agent management, and interactive developer assistance within your Nx monorepo.</p>"},{"location":"reference/docs/#1-python-backend-service","title":"1. Python Backend Service","text":"<p>Purpose: This service is the engine that powers the AI functionalities. It orchestrates interactions with external APIs, processes code inputs, and leverages a context-aware vector store to drive retrieval-augmented generation (RAG).</p> <p>Core Functions:</p> <ul> <li> <p>API Integration:   Communicates with external AI services (e.g., OpenAI) to process code diffs and generate intelligent insights.</p> </li> <li> <p>Contextual Data Retrieval:   Interacts with a vector store (such as Qdrant, Pinecone, or FAISS) to fetch deep contextual information, ensuring that agent responses are tailored to the specific nuances of your codebase.</p> </li> </ul> <ul> <li>Request Orchestration:   Serves as the central hub for executing AI-driven tasks triggered by the NX plugin, ensuring that data flows seamlessly between external APIs and your monorepo.</li> </ul>"},{"location":"reference/docs/#2-react-frontend-developer-chat-interface","title":"2. React Frontend (Developer Chat Interface)","text":"<p>Purpose: Provides an intuitive chat-based interface for developers to interact with the AI system in real time. This frontend enables developers to ask questions, receive code review suggestions, and engage in interactive troubleshooting directly from their development environment.</p> <p>Core Functions:</p> <ul> <li> <p>Chat Interface:   A responsive, user-friendly chat UI that allows developers to send queries and receive detailed AI-generated responses.</p> </li> <li> <p>Real-Time Feedback:   Displays context-aware recommendations and insights, ensuring that suggestions are relevant and actionable.</p> </li> <li> <p>Integration with Backend:   Communicates with the Python backend service via HTTP, sending user inputs and displaying returned AI insights.</p> </li> </ul>"},{"location":"reference/docs/#3-nx-plugin-orchestrator-integration-layer","title":"3. NX Plugin (Orchestrator &amp; Integration Layer)","text":"<p>Purpose: Acts as the bridge between your Nx monorepo and the AI backend service. This plugin integrates AI-driven tasks into your development workflow, automating configuration, agent management, and code review processes via Nx generators and executors.</p> <p>Core Functions:</p> <ul> <li> <p>Generators:   Provide interactive commands to set up the plugin configuration, manage credentials, and upsert new agents. These generators help initialize essential files (like the YAML configuration and agents mapping) and ensure consistency across projects.</p> </li> <li> <p>Executors:   Enable the execution of AI-driven tasks as part of your CI/CD pipelines. For example, they can trigger code reviews and quality checks on demand.</p> </li> </ul> <ul> <li>Seamless Integration:   Ensures that the AI functionalities are fully integrated into your Nx workspace, making it easy to trigger tasks through standard Nx commands.</li> </ul>"},{"location":"reference/docs/#how-they-work-together","title":"How They Work Together","text":"<ul> <li>Integration Flow: </li> </ul>"},{"location":"reference/docs/summary/","title":"Summary","text":"<ul> <li>Architecture</li> <li>Plugin</li> <li>Apps</li> <li>Libs</li> <li>Dependency Graph</li> </ul>"},{"location":"reference/nx-ai-plugin/","title":"nx-ai-plugin","text":"<p>This library was generated with Nx.</p>"},{"location":"reference/nx-ai-plugin/#building","title":"Building","text":"<p>Run <code>nx build nx-ai-plugin</code> to build the library.</p>"},{"location":"reference/nx-ai-plugin/#running-unit-tests","title":"Running unit tests","text":"<p>Run <code>nx test nx-ai-plugin</code> to execute the unit tests via Jest.</p>"}]}